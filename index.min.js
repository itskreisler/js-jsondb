import fs from"fs";export default class JsonDb{#e;constructor(e){this.#e=e,this.#t()}#t(){fs.existsSync(this.#e)||fs.mkdirSync(this.#e,{recursive:!0})}#s(e){fs.existsSync(`${this.#e}/${e}`)||fs.writeFileSync(`${this.#e}/${e}`,"[]")}#i(e){return e.endsWith(".json")||(e+=".json"),e}insert(e,t){e=this.#i(e),this.#s(e);const s=fs.readFileSync(`${this.#e}/${e}`),i=JSON.parse(s);i.push(t),fs.writeFileSync(`${this.#e}/${e}`,JSON.stringify(i))}select(e,t){if(e=this.#i(e),!fs.existsSync(`${this.#e}/${e}`))return[];const s=fs.readFileSync(`${this.#e}/${e}`),i=JSON.parse(s);return t?i.filter(t):i}update(e,...t){const[s,i]=t;e=this.#i(e);const r=`${this.#e}/${e}`;if(fs.existsSync(r)){const e=fs.readFileSync(r);let t=JSON.parse(e);t=t.map((e=>null==s||"function"!=typeof s||s(e)?{...e,...i}:e)),fs.writeFileSync(r,JSON.stringify(t))}}delete(e,t){e=this.#i(e);const s=`${this.#e}/${e}`;if(void 0===t&&fs.existsSync(s)&&fs.unlinkSync(s),fs.existsSync(s)){const e=fs.readFileSync(s),i=JSON.parse(e).filter((e=>!t(e)));fs.writeFileSync(s,JSON.stringify(i))}}}