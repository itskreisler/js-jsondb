import fs from"fs";export default class JsonDb{#t;constructor(t){this.#t=t,this.#e()}#e(){fs.existsSync(this.#t)||fs.mkdirSync(this.#t,{recursive:!0})}#s(t){fs.existsSync(`${this.#t}/${t}`)||fs.writeFileSync(`${this.#t}/${t}`,"[]")}#i(t){return t.endsWith(".json")||(t+=".json"),t}insert(t,e){t=this.#i(t),this.#s(t);const s=fs.readFileSync(`${this.#t}/${t}`);let i=JSON.parse(s);Array.isArray(e)?i=[...i,...e]:i.push(e),fs.writeFileSync(`${this.#t}/${t}`,JSON.stringify(i))}select(t,e){if(t=this.#i(t),!fs.existsSync(`${this.#t}/${t}`))return[];const s=fs.readFileSync(`${this.#t}/${t}`),i=JSON.parse(s);return e?i.filter(e):i}update(t,...e){const[s,i]=e;t=this.#i(t);const r=`${this.#t}/${t}`;if(fs.existsSync(r)){const t=fs.readFileSync(r);let e=JSON.parse(t);e=e.map((t=>null==s||"function"!=typeof s||s(t)?"function"==typeof i?{...t,...i(t)}:{...t,...i}:t)),fs.writeFileSync(r,JSON.stringify(e))}}delete(t,e){t=this.#i(t);const s=`${this.#t}/${t}`;if(void 0===e&&fs.existsSync(s)&&fs.unlinkSync(s),fs.existsSync(s)){const t=fs.readFileSync(s),i=JSON.parse(t).filter((t=>!e(t)));fs.writeFileSync(s,JSON.stringify(i))}}}